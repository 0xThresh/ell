// Knowledge Graph
digraph {
	1 [label="Start lexical_closure" color=blue]
	2 [label="Initialize already_closed, recursion_stack, forced_dependencies" color=green]
	3 [label="Call _unwrap_function(func)" color=blue]
	4 [label="Unwrap to original_func and wrapper_func" color=green]
	5 [label="Compute func_hash" color=orange]
	6 [label="Check if func_hash in already_closed" color=yellow]
	7 [label="func_hash found in already_closed" color=red]
	8 [label="Return empty closure" color=green]
	9 [label="Retrieve source using getsource(original_func)" color=blue]
	10 [label="Handle IOError or TypeError" color=red]
	11 [label="Create Closure object" color=green]
	12 [label="Add func_hash to already_closed" color=green]
	13 [label="Append original_func.__qualname__ to recursion_stack" color=green]
	14 [label="Call _get_globals_and_frees(original_func)" color=blue]
	15 [label="Retrieve globals and free variables" color=green]
	16 [label="Call _process_dependencies" color=blue]
	17 [label="Process default kwargs if Function or Method" color=green]
	18 [label="Iterate over globals and frees" color=green]
	19 [label="Call _process_variable for each variable" color=blue]
	20 [label="Retrieve module of variable" color=green]
	21 [label="Check if module should be imported" color=yellow]
	22 [label="If yes, add import statement to closure.imports" color=green]
	23 [label="If no, handle variable based on type" color=blue]
	24 [label="Call _handle_special_variable or _handle_other_variable" color=blue]
	25 [label="Process callable objects" color=green]
	26 [label="Call lexical_closure recursively for callable" color=blue]
	27 [label="Add Dependency to closure.dependencies" color=green]
	28 [label="Update closure.uses" color=green]
	29 [label="Process forced_dependencies" color=green]
	30 [label="Call _assemble_final_source" color=blue]
	31 [label="Combine imports, dependencies, modules, source" color=green]
	32 [label="Remove duplicate lines" color=green]
	33 [label="Replace multiple newlines" color=green]
	34 [label="Call _clean_source" color=blue]
	35 [label="Return cleaned source" color=green]
	36 [label="Call format_source for source and cleaned_source" color=blue]
	37 [label="Generate function_hash with _generate_function_hash" color=blue]
	38 [label="Set closure attributes on target_func" color=green]
	39 [label="Update __ell_uses__ if decorated" color=green]
	40 [label="Return final_source, formatted sources, uses_set" color=green]
	1 -> 2 [label=initializes color=black]
	2 -> 3 [label=calls color=black]
	3 -> 4 [label=unwraps color=black]
	4 -> 5 [label=hashes color=black]
	5 -> 6 [label=checks color=black]
	6 -> 7 [label="if in" color=black]
	7 -> 8 [label=then color=black]
	6 -> 9 [label=else color=black]
	9 -> 10 [label="handles exception" color=red]
	9 -> 11 [label=success color=black]
	11 -> 12 [label="adds to" color=black]
	12 -> 13 [label="appends to" color=black]
	13 -> 14 [label=calls color=black]
	14 -> 15 [label=retrieves color=black]
	15 -> 16 [label=calls color=black]
	16 -> 17 [label=processes color=black]
	17 -> 18 [label=iterates color=black]
	18 -> 19 [label="processes each" color=black]
	19 -> 20 [label="retrieves module" color=black]
	20 -> 21 [label="checks import" color=black]
	21 -> 22 [label="if true" color=black]
	21 -> 23 [label="if false" color=black]
	23 -> 24 [label="handles type" color=black]
	24 -> 25 [label="if special" color=black]
	24 -> 35 [label="if other" color=black]
	25 -> 26 [label="process callable" color=black]
	26 -> 27 [label="adds dependency" color=black]
	27 -> 28 [label="updates uses" color=black]
	19 -> 29 [label="after variables" color=black]
	29 -> 30 [label=calls color=black]
	30 -> 31 [label=assembles color=black]
	31 -> 32 [label="removes duplicates" color=black]
	32 -> 33 [label="cleans newlines" color=black]
	33 -> 34 [label=calls color=black]
	34 -> 35 [label=returns color=black]
	35 -> 36 [label="formats source" color=black]
	36 -> 37 [label="generates hash" color=black]
	37 -> 38 [label="sets attributes" color=black]
	38 -> 39 [label="updates uses" color=black]
	39 -> 40 [label="returns final output" color=black]
}
